require 'debugger'
require 'pathname'

require_relative '../lib/rip/boot'
require_relative '../lib/rip/ast'
require_relative '../lib/rip/parser'

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus
  config.expect_with :rspec do |c|
    c.syntax = :expect
  end

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'

  def samples_path
    Pathname("#{__FILE__}/../fixtures").expand_path
  end

  def parser
    Rip::Parser.new
  end

  def apt(code)
    Rip::Parser.new.parse(code)
  end

  def ast(code)
    Rip::AST.new(apt(code)).tree
  end
end

RSpec::Matchers.define :match_tree do |expected_tree|
  tree_matcher = lambda do |parse_tree, expected = expected_tree|
    begin
      parse_keys = parse_tree.keys
      raise "Not all expected keys present. Expected keys #{expected.keys}, but got #{parse_keys}" unless expected.keys.all? { |key| parse_keys.include? key }

      expected.each do |key, value|
        case value
        when Array
          raise "#{parse_tree[key]} expected have the same number of entries as #{value}" unless parse_tree[key].count == value.count
          value.each_with_index do |ev, i|
            tree_matcher.call parse_tree[key][i], ev
          end
        when Hash
          tree_matcher.call parse_tree[key], value
        else
          raise "Expected #{value} for #{key.inspect}, but got #{parse_tree[key]}" unless parse_tree[key] == value
        end
      end

      true
    rescue => e
      puts e.message
      false
    end
  end

  match &tree_matcher
end
